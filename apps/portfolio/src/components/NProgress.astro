---
import { minifyCss } from "@/utils/minifyCss.ts";
import { minifyHtml } from "@/utils/minifyHtml.ts";
import type { NProgressOptions } from "nprogress";
import styles from "./NProgress.module.css";

type Props = Partial<NProgressOptions> & {
  height?: number | string;
  color?: string;
  colorDark?: string;
  delay?: number;
  disableSameRoute?: boolean;
};

const {
  height = "2px",
  color = "#f540cc",
  colorDark,
  template = minifyHtml(`
    <div class="${styles.bar}" role="bar">
        <div class="${styles.peg}"></div>
    </div>
    <div class="${styles.spinner}" role="spinner">
        <div class="${styles.spinnerIcon}"></div>
    </div>
  `),
  trickle = true,
  trickleSpeed,
} = Astro.props;
---

<script>
  import NProgress from "nprogress";
  import type { TransitionBeforePreparationEvent } from "astro:transitions/client";

  class NProgressElem extends HTMLElement {
    constructor() {
      super();

      let {
        delay,
        disableSameRoute,
        barSelector,
        easing,
        minimum,
        parent,
        positionUsing,
        showSpinner,
        speed,
        spinnerSelector,
        template,
        trickle,
        trickleSpeed,
      } = this.dataset as any;

      delay = Number(delay) || 0;
      disableSameRoute = disableSameRoute === "true";

      let timer: ReturnType<typeof setTimeout>;
      let incInterval: ReturnType<typeof setInterval>;

      const start = (event: TransitionBeforePreparationEvent) => {
        clearTimeout(timer);
        clearInterval(incInterval);
        if (disableSameRoute && event.from.pathname === event.to.pathname) return;
        timer = setTimeout(() => NProgress.start(), delay);
        incInterval = setInterval(NProgress.inc, 1000);
      };

      const done = () => {
        clearTimeout(timer);
        clearInterval(incInterval);
        NProgress.done();
      };

      NProgress.configure({
        barSelector,
        easing,
        minimum: Number(minimum) || undefined,
        parent,
        positionUsing,
        showSpinner: showSpinner === "true",
        speed: Number(speed) || undefined,
        spinnerSelector,
        template,
        trickle: trickle !== "false",
        trickleSpeed: Number(trickleSpeed) || undefined,
      });

      document.addEventListener("astro:before-preparation", start as any);
      document.addEventListener("astro:page-load", done);
    }
  }

  customElements.define("astro-nprogress", NProgressElem);
</script>

<astro-nprogress
  data-delay={Astro.props.delay}
  data-disable-same-route={(!!Astro.props.disableSameRoute).toString()}
  data-bar-selector={Astro.props.barSelector}
  data-easing={Astro.props.easing}
  data-minimum={Astro.props.minimum}
  data-parent={Astro.props.parent}
  data-position-using={Astro.props.positionUsing}
  data-show-spinner={(!!Astro.props.showSpinner).toString()}
  data-speed={Astro.props.speed}
  data-spinner-selector={Astro.props.spinnerSelector}
  data-template={template}
  data-trickle={(!!trickle).toString()}
  data-trickle-speed={trickleSpeed}></astro-nprogress>

<style
  set:html={minifyCss(`
    :root {
      --nprogress-color:${color};
      --nprogress-height:${height};
    }
    ${colorDark ? `:root.dark{--nprogress-color:${colorDark};}` : ""}
  `)}
></style>
