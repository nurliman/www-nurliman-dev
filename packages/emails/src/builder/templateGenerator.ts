import prettier from "prettier";
import type { ComponentProp } from "./types";

export const generateCode = async (
  templateName: string,
  escapedHtml: string,
  props: ComponentProp[],
): Promise<string> => {
  const propsInterface = generatePropsInterface(templateName, props);
  const propsParam = `props: ${templateName}Props`;

  const unformattedCode = `
    // This file is generated by the email builder.
    // Do not edit this file manually.

    import unescape from "lodash.unescape";
    import pupa from "pupa";

    const TEMPLATE_HTML = \`${escapedHtml}\`;

    ${propsInterface}

    export const render${templateName} = (${propsParam}): string => {
      const unescapedHtml = unescape(TEMPLATE_HTML);
      return pupa(unescapedHtml, props ?? {}, { ignoreMissing: true });
    };`;

  return format(unformattedCode);
};

const generatePropsInterface = (templateName: string, props: ComponentProp[]): string => {
  if (props.length === 0) {
    return `export type ${templateName}Props = {};`;
  }

  const propsLines = props.map((prop) => {
    const optional = prop.optional ? "?" : "";
    return `${prop.name}${optional}: ${prop.type};`;
  });

  return `export type ${templateName}Props = {
      ${propsLines.join("\n")}
    };`;
};

export const generateIndexFile = async (templateNames: string[]): Promise<string> => {
  const unformattedCode = `
    // This file is generated by the email builder.
    // Do not edit this file manually.

    ${templateNames.map((name) => `export * from "./${name}";`).join("\n")}
  `;

  return format(unformattedCode);
};

const format = async (code: string): Promise<string> => {
  try {
    return await prettier.format(code, { parser: "typescript" });
  } catch (error) {
    console.warn("Failed to format TypeScript code with Prettier:", error);
    return code;
  }
};
